document()
use_package("lubridate")
# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
document()
document()
document()
library(devtools)
document()
document()
library(PricePrediction)
help(package="PricePrediction")
library(PricePrediction)
library(PricePrediction)
document()
installed.packages(PricePrediction)
install.packages(PricePrediction)
# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
install.packages(PricePrediction)
# Package names
packages <- c("dplyr","tidyr","zoo","rpart","superml", "textstem", "e1071", "neuralnet", "stringr", "randomForest", "shiny", "neuralnet", "caret", "Metrics", "data.table", "ggplot2", "plyr")
library(pp_packages)
installed.packages("Rtools")
install.packages("Rtools")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
install.Rtools()
train_df = read.csv(file = 'train.tsv', sep = '\t', header = TRUE)
test_df = read.csv(file = 'test.tsv', sep = '\t', header = TRUE)
head(train_df)
train_df = read.csv(file = 'train.tsv', sep = '\t', header = TRUE)
test_df = read.csv(file = 'test.tsv', sep = '\t', header = TRUE)
head(train_df)
head(train_df)
# Replace brand_name column null with "unknown brand"
train_df['brand_name'][train_df['brand_name'] == ""] <- "Unknown brand"
train_df['brand_name'] = na.fill(train_df['brand_name'], "Unknown brand")
# Replace category_name null with "Other"
train_df['category_name'][train_df['category_name'] == ""] <- "Other/Other/Other"
train_df['category_name'] = na.fill(train_df['category_name'], "Other/Other/Other")
# Replace item_description null with "No description"
train_df['item_description'][train_df['item_description'] == ""] <- "No description"
train_df['item_description'] = na.fill(train_df['item_description'], "No description")
head(train_df)
# Seperating category variable into 3 categories
category_name = train_df$category_name
train_df = train_df  %>% separate(category_name, c("main_category", "subcat_1", "subcat_2"), sep="/")
train_df$category_name = category_name
category_name = train_df['category_name']
train_df = train_df  %>% separate(category_name, c("main_category", "subcat_1", "subcat_2"), sep="/")
train_df$category_name = category_name
print(train_df)
print(head(train_df))
category_name = train_df['category_name']
train_df = train_df  %>% separate(category_name, c("main_category", "subcat_1", "subcat_2"), sep="/")
#train_df$category_name = category_name
category_name = train_df['category_name']
train_df <- train_df  %>% separate(category_name, c("main_category", "subcat_1", "subcat_2"), sep="/")
#train_df$category_name = category_name
category_name = train_df['category_name']
train_df  %>% separate(category_name, c("main_category", "subcat_1", "subcat_2"), sep="/")
#train_df$category_name = category_name
print(head(train_df))
train_df <- separate(train_df, col='category_name', into = c("main_category", "subcat_1", "subcat_2"), sep="/")
#train_df$category_name = category_name
train_df <- separate(train_df, col='category_name', into = c("main_category", "subcat_1", "subcat_2"), sep="/")
pp_packages()
#' Install's the necessary packages for price prediction model
#'
#' @return the loaded packages with a statement
#' @export
#'
#' @examples
#' pp_packages()
pp_packages <- function(){
# Package names
packages <- c("dplyr","tidyr","zoo","rpart","superml", "textstem", "e1071", "neuralnet", "stringr", "randomForest", "shiny", "neuralnet", "caret", "Metrics", "data.table", "ggplot2", "plyr")
# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# Packages loading
invisible(lapply(packages, library, character.only = TRUE))
}
pp_packages()
train_df <- separate(train_df, col='category_name', into = c("main_category", "subcat_1", "subcat_2"), sep="/")
print(head(train_df))
category_name = train_df['category_name']
train_df <- separate(category_name, c("main_category", "subcat_1", "subcat_2"), sep="/")
train_df$category_name = category_name
category_name = train_df['category_name']
train_df <- separate(category_name, c("main_category", "subcat_1", "subcat_2"), sep="/")
train_df['category_name'] = category_name
print(head(train_df))
#' Install's the necessary packages for price prediction model
#'
#' @return the loaded packages with a statement
#' @export
#'
#' @examples
#' pp_packages()
pp_packages <- function(){
# Package names
packages <- c("dplyr","tidyr","zoo","rpart","superml", "textstem", "e1071", "neuralnet", "stringr", "randomForest", "shiny", "neuralnet", "caret", "Metrics", "data.table", "ggplot2", "plyr")
# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# Packages loading
invisible(lapply(packages, library, character.only = TRUE))
}
pp_packages()
train_df = read.csv(file = 'train.tsv', sep = '\t', header = TRUE)
test_df = read.csv(file = 'test.tsv', sep = '\t', header = TRUE)
train_df['brand_name'][train_df['brand_name'] == ""] <- "Unknown brand"
train_df['brand_name'] = na.fill(train_df['brand_name'], "Unknown brand")
# Replace category_name null with "Other"
train_df['category_name'][train_df['category_name'] == ""] <- "Other/Other/Other"
train_df['category_name'] = na.fill(train_df['category_name'], "Other/Other/Other")
# Replace item_description null with "No description"
train_df['item_description'][train_df['item_description'] == ""] <- "No description"
train_df['item_description'] = na.fill(train_df['item_description'], "No description")
# Seperating category variable into 3 categories
category_name = train_df$category_name
train_df = train_df  %>% separate(category_name, c("main_category", "subcat_1", "subcat_2"), sep="/")
train_df$category_name = category_name
print(train_df)
head(train_df)
#Label enncoding category,brand_name,subcat_1,subcat_2
lbl_main_category <- LabelEncoder$new()
lbl_main_category$fit(train_df$main_category)
lbl_brand_name <- LabelEncoder$new()
lbl_brand_name$fit(train_df$brand_name)
lbl_subcat_1 <- LabelEncoder$new()
lbl_subcat_1$fit(train_df$subcat_1)
lbl_subcat_2 <- LabelEncoder$new()
lbl_subcat_2$fit(train_df$subcat_2)
train_df$n_main_category <- lbl_main_category$transform(train_df$main_category)
train_df$n_brand_name = lbl_brand_name$transform(train_df$brand_name)
train_df$n_subcat_1 = lbl_subcat_1$transform(train_df$subcat_1)
train_df$n_subcat_2 = lbl_subcat_2$transform(train_df$subcat_2)
new <-function(){
train_df = read.csv(file = 'train.tsv', sep = '\t', header = TRUE)
test_df = read.csv(file = 'test.tsv', sep = '\t', header = TRUE)
new_list <-list("train_data"=train_df, "test_data"=test_df)
return(new_list)
}
new()
#Reading the data
new <-function(){
train_df = read.csv(file = 'train.tsv', sep = '\t', header = TRUE)
test_df = read.csv(file = 'test.tsv', sep = '\t', header = TRUE)
new_list <-list("train_data"=train_df, "test_data"=test_df)
return(new_list$train_data)
}
new()
train_data = new()
head(train_data)
#Reading the data
new <-function(){
train <- function(){
train_df = read.csv(file = 'train.tsv', sep = '\t', header = TRUE)
return(train_df)
}
test <- function(){
test_df = read.csv(file = 'test.tsv', sep = '\t', header = TRUE)
return(test_df)
}
#new_list <-list("train_data"=train_df, "test_data"=test_df)
#return(new_list)
}
train = new().train()
train = new(train())
new()
train()
#Reading the data
new <-function(){
train_df = read.csv(file = 'train.tsv', sep = '\t', header = TRUE)
test_df = read.csv(file = 'test.tsv', sep = '\t', header = TRUE)
new_list <-list("train_data"=train_df, "test_data"=test_df)
return(new_list)
}
data = new()
head(data$train_data)
head(data$test_data)
document()
source('~/PricePrediction/R/Req_Packages.R')
source('~/PricePrediction/R/Req_Packages.R')
install.packages("learnr")
document()
devtools::document()
devtools::document()
rm(list = c("Req_Packages"))
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
